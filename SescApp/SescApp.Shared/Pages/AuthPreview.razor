@page "/authpreview"
@using MediatR
@using SescApp.Integration.Lycreg.Models
@using SescApp.Integration.Lycreg.Models.MediatR
@using SescApp.Shared.Services
@inject IMediator mediator
@inject IUserStorage storage;

<h3>AuthPreview</h3>

@if (Auth is null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="@HandleAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="name">Логин:</label>
            <InputText id="name" @bind-Value="@login" />
            <ValidationMessage For="@(() => login)" />
        </div>

        <div>
            <label for="password">Пароль:</label>
            <InputText id="password" @bind-Value="@password" type="password" />
            <ValidationMessage For="@(() => password)" />
        </div>


        @if (solvedCaptcha is not null)
        {
            <div>
                <img src="@($"data:image/png;base64,{Convert.ToBase64String(solvedCaptcha.CaptchaBytes)}")" alt="Капча" />
                <br />
                <label for="captcha">Решенная капча</label>
                <InputText id="captcha" @bind-Value="@solvedCaptcha.CaptchaSolution" />
                <ValidationMessage For="@(() => solvedCaptcha.CaptchaSolution)" />
            </div>
            <button type="submit">Отправить</button>
        }
        else
        {
            <p>Капча грузится</p>
        }
    </EditForm>
}
else
{
    <text>@Auth.Result</text>
    if (Auth.Result == Integration.Lycreg.Models.AuthorizationResult.Success)
    {
        <text>@Auth.Auth!.Token</text>
    }
}

@code {
    private AuthResponse? Auth { get; set; }

    private string login;
    private string password;

    private EditContext editContext;

    private SolvedCaptcha? solvedCaptcha = null;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(this);

        var auth = await storage.GetAsync<Authorization>("lycregAuth");

        if (auth is not null)
        {
            Auth = new AuthResponse { Result = AuthorizationResult.Success, Auth = auth };
        }
        else
        {
            solvedCaptcha = await mediator.Send(new GetSolvedCaptchaRequest());
        }
    }

    private async Task HandleAsync()
    {
        // Отправка запроса на аутентификацию
        var resp = await mediator.Send(new AuthRequest()
            {
                Login = login,
                Password = password,
                CaptchaId = solvedCaptcha!.CaptchaId,
                CaptchaSolution = solvedCaptcha.CaptchaSolution
            });

        // Обновление состояния компонента
        Auth = resp;

        if (Auth.Result == AuthorizationResult.Success)
        {
            await storage.SetAsync("lycregAuth", Auth.Auth!);
        }
    }
}
